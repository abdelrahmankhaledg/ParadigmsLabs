
PARSER_BEGIN(Hello)
 import java.io.StringReader;
import java.util.HashMap;
 public class Hello {
	static public final HashMap<String,Integer >hashmap = new HashMap();
    public static void main(String[] args) throws Exception {
      Hello hello=new Hello(System.in);
      Hello.starts();
    }
    
}

PARSER_END(Hello)


SKIP: { " " |"\t" |"\n" |"\r" }

TOKEN : { <#Letter: (["a"-"z"]) > }
TOKEN : { <#Digit: (["0"-"9"]) > }
TOKEN : { <NUM: (<Digit>)+> }
TOKEN : { <Var: (<Letter>)+> }
TOKEN : { <PLUS: "+" > }
TOKEN : { <MINUS: "-" >}
TOKEN : { <EQUAL:"==" >}
TOKEN : {<LEFTBRACE: "(" >}
TOKEN : {<RIGHTBRACE:")" >}
TOKEN : {<TRUE: "tt">}
TOKEN : {<FALSE: "ff" >}
TOKEN : {<NEGATION:"!" >}
TOKEN : {<AND:"^" >}
void starts():
{
 int result;
}
{
  result=AExp()
 	{
 	  System.out.println(result);
 	} 
 	  
   <EOF>
}
int AExp():
{
String temp=""; 
int  num1;
boolean add=true;
int num2;
Token t;
int value;
}
{
	(
	  (
	    <LEFTBRACE>
	  num1= AExp()
	  (  
	  <PLUS>
	  |
	  (
	    
	  <MINUS>
	  {add=false; }
	  )
	  )
	 num2 = AExp()
	  <RIGHTBRACE>
	  )
	  {if(add) {
	    return num1+num2;
	    }else {
			return num1-num2;
	      }

	    }
	  
	)
	|
	(
	  t=<NUM>
	  { return Integer.parseInt(t.image);}
	)
	|
	(
	  t=<Var>
	  {temp=t.image; }
	  {if(hashmap.containsKey(temp)) {
			return hashmap.get(temp);

	    }else {
			return -1;
	      } }
	)  
	
  }

boolean BExp():
{boolean result1;
boolean result2;
int a1,a2;
}
{
	(
	  <LEFTBRACE>
	  (
	  (
	  result1= BExp()
	  <AND>
	  result2= BExp()
	  <RIGHTBRACE>
	  )
	  { return result1&&result2;}
		|
		(
		a1 = AExp()
		  <EQUAL>
		a2 = AExp()
		<RIGHTBRACE>
		{
		  if(a1==a2) {
		    return true;
		    }else {
		      return false;
		     }
		} 
		) 
	  )
	  
	)
	|
	(
	  <FALSE>
	  {return false; }
	)
	
	|
	(
	  <NEGATION>
	 result1= BExp()
	
	 {
	   return !result1;
	 }
	)
	|
	(
	  <TRUE>
	  {return true; }
	 )
  }
